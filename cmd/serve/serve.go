package serve

import (
	"fmt"
	"html/template"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"time"

	"github.com/travis-mark/salthaven/internal/markdown"
)

// NoteEntry represents a markdown note with its metadata
type NoteEntry struct {
	Path    string
	Date    time.Time
	Title   string
	Content string
}

const htmlTemplate = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>On This Day - {{.FormattedDate}}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
            background-color: #f9f9f9;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .header h1 {
            color: #2c3e50;
            margin: 0;
        }
        .header p {
            color: #7f8c8d;
            margin: 10px 0 0 0;
        }
        .note {
            background: white;
            margin: 20px 0;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .note-header {
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .note-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #2c3e50;
            margin: 0;
        }
        .note-date {
            color: #7f8c8d;
            font-size: 0.9em;
            margin: 5px 0;
        }
        .note-path {
            color: #95a5a6;
            font-size: 0.8em;
            font-family: monospace;
        }
        .note-content {
            white-space: pre-wrap;
            color: #34495e;
        }
        .no-notes {
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            padding: 40px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            color: #95a5a6;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>On This Day</h1>
        <p>{{.FormattedDate}} • {{.Count}} {{if eq .Count 1}}entry{{else}}entries{{end}} found</p>
    </div>

    {{if .Notes}}
        {{range .Notes}}
        <div class="note">
            <div class="note-header">
                {{if .Title}}
                <h2 class="note-title">{{.Title}}</h2>
                {{end}}
                <div class="note-date">{{.Date.Format "January 2, 2006"}}</div>
                <div class="note-path">{{.Path}}</div>
            </div>
            <div class="note-content">{{.Content}}</div>
        </div>
        {{end}}
    {{else}}
        <div class="no-notes">
            No notes found for this day
        </div>
    {{end}}

    <div class="footer">
        Generated by Salthaven • <a href="javascript:location.reload()">Refresh</a>
    </div>
</body>
</html>`

// extractTitleFromContent extracts title from markdown content
func extractTitleFromContent(content string) string {
	lines := splitLines(content)
	inFrontmatter := false

	for i, line := range lines {
		line = trimSpace(line)

		if i == 0 && line == "---" {
			inFrontmatter = true
			continue
		}

		if inFrontmatter && line == "---" {
			inFrontmatter = false
			continue
		}

		if inFrontmatter {
			if startsWithTitle(line) {
				return extractTitleValue(line)
			}
		} else {
			// Look for first markdown header
			if startsWithHash(line) {
				return trimLeadingHashes(line)
			}
		}
	}

	return ""
}

// Helper functions to avoid regex
func splitLines(s string) []string {
	var lines []string
	var current string
	for i, c := range s {
		if c == '\n' {
			lines = append(lines, current)
			current = ""
		} else if c == '\r' && i+1 < len(s) && s[i+1] == '\n' {
			lines = append(lines, current)
			current = ""
		} else if c != '\r' {
			current += string(c)
		}
	}
	if current != "" {
		lines = append(lines, current)
	}
	return lines
}

func trimSpace(s string) string {
	start := 0
	end := len(s)

	for start < end && isSpace(s[start]) {
		start++
	}

	for end > start && isSpace(s[end-1]) {
		end--
	}

	return s[start:end]
}

func isSpace(c byte) bool {
	return c == ' ' || c == '\t' || c == '\n' || c == '\r'
}

func startsWithTitle(line string) bool {
	return len(line) >= 6 && line[:6] == "title:"
}

func extractTitleValue(line string) string {
	if len(line) <= 6 {
		return ""
	}
	value := trimSpace(line[6:])
	if len(value) >= 2 && ((value[0] == '"' && value[len(value)-1] == '"') || (value[0] == '\'' && value[len(value)-1] == '\'')) {
		return value[1 : len(value)-1]
	}
	return value
}

func startsWithHash(line string) bool {
	return len(line) > 0 && line[0] == '#'
}

func trimLeadingHashes(line string) string {
	i := 0
	for i < len(line) && line[i] == '#' {
		i++
	}
	if i < len(line) && line[i] == ' ' {
		i++
	}
	return line[i:]
}

// getContentWithoutFrontmatter removes YAML frontmatter from content
func getContentWithoutFrontmatter(content string) string {
	lines := splitLines(content)
	if len(lines) == 0 {
		return content
	}

	if trimSpace(lines[0]) != "---" {
		return content
	}

	for i := 1; i < len(lines); i++ {
		if trimSpace(lines[i]) == "---" {
			if i+1 < len(lines) {
				var result string
				for j := i + 1; j < len(lines); j++ {
					if j > i+1 {
						result += "\n"
					}
					result += lines[j]
				}
				return result
			}
			return ""
		}
	}

	return content
}

// PageData represents the data passed to the HTML template
type PageData struct {
	Notes         []NoteEntry
	FormattedDate string
	Count         int
}

// Execute runs the serve command
func Execute(folderPath string, verbose bool, port int) error {
	// Check if folder exists
	if _, err := os.Stat(folderPath); os.IsNotExist(err) {
		return fmt.Errorf("folder does not exist: %s", folderPath)
	}

	// Set up HTTP handler
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// Get notes for today using the same logic as onthisday
		today := time.Now()
		notePaths, err := markdown.ScanMarkdownNotes(folderPath, markdown.SameDayMatcher, today, verbose)
		if err != nil {
			http.Error(w, fmt.Sprintf("Error scanning folder: %v", err), http.StatusInternalServerError)
			return
		}

		// Process each note to extract metadata and content
		var notes []NoteEntry
		for _, path := range notePaths {
			content, err := markdown.ReadFileContent(path)
			if err != nil {
				if verbose {
					fmt.Printf("Warning: Could not read file %s: %v\n", path, err)
				}
				continue
			}

			fileDate, err := markdown.ParseYAMLDate(content)
			if err != nil {
				if verbose {
					fmt.Printf("Warning: Could not parse date from %s: %v\n", path, err)
				}
				continue
			}

			title := extractTitleFromContent(content)
			cleanContent := getContentWithoutFrontmatter(content)

			// Get relative path for display
			relPath, err := filepath.Rel(folderPath, path)
			if err != nil {
				relPath = path
			}

			notes = append(notes, NoteEntry{
				Path:    relPath,
				Date:    fileDate,
				Title:   title,
				Content: cleanContent,
			})
		}

		// Prepare template data
		data := PageData{
			Notes:         notes,
			FormattedDate: today.Format("Monday, January 2"),
			Count:         len(notes),
		}

		// Parse and execute template
		tmpl, err := template.New("onthisday").Parse(htmlTemplate)
		if err != nil {
			http.Error(w, fmt.Sprintf("Template error: %v", err), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		if err := tmpl.Execute(w, data); err != nil {
			http.Error(w, fmt.Sprintf("Template execution error: %v", err), http.StatusInternalServerError)
			return
		}
	})

	// Start server
	addr := ":" + strconv.Itoa(port)
	fmt.Printf("Starting server on http://localhost%s\n", addr)
	fmt.Printf("Serving notes from: %s\n", folderPath)
	fmt.Printf("Press Ctrl+C to stop\n")

	return http.ListenAndServe(addr, nil)
}
